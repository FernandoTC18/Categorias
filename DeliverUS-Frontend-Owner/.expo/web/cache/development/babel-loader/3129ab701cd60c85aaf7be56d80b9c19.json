{"ast":null,"code":"'use strict';\nvar db = require('mime-db');\nvar extname = function extname(path) {\n  if (!path || path.indexOf('.') === -1) {\n    return '';\n  }\n  path = '.' + path.split('.').pop().toLowerCase();\n  return /.*(\\..*)/g.exec(path)[1] || '';\n};\nvar extractTypeRegExp = /^\\s*([^;\\s]*)(?:;|\\s|$)/;\nvar textTypeRegExp = /^text\\//i;\nexports.charset = charset;\nexports.charsets = {\n  lookup: charset\n};\nexports.contentType = contentType;\nexports.extension = extension;\nexports.extensions = Object.create(null);\nexports.lookup = lookup;\nexports.types = Object.create(null);\npopulateMaps(exports.extensions, exports.types);\nfunction charset(type) {\n  if (!type || typeof type !== 'string') {\n    return false;\n  }\n  var match = extractTypeRegExp.exec(type);\n  var mime = match && db[match[1].toLowerCase()];\n  if (mime && mime.charset) {\n    return mime.charset;\n  }\n  if (match && textTypeRegExp.test(match[1])) {\n    return 'UTF-8';\n  }\n  return false;\n}\nfunction contentType(str) {\n  if (!str || typeof str !== 'string') {\n    return false;\n  }\n  var mime = str.indexOf('/') === -1 ? exports.lookup(str) : str;\n  if (!mime) {\n    return false;\n  }\n  if (mime.indexOf('charset') === -1) {\n    var charset = exports.charset(mime);\n    if (charset) mime += '; charset=' + charset.toLowerCase();\n  }\n  return mime;\n}\nfunction extension(type) {\n  if (!type || typeof type !== 'string') {\n    return false;\n  }\n  var match = extractTypeRegExp.exec(type);\n  var exts = match && exports.extensions[match[1].toLowerCase()];\n  if (!exts || !exts.length) {\n    return false;\n  }\n  return exts[0];\n}\nfunction lookup(path) {\n  if (!path || typeof path !== 'string') {\n    return false;\n  }\n  var extension = extname('x.' + path).toLowerCase().substr(1);\n  if (!extension) {\n    return false;\n  }\n  return exports.types[extension] || false;\n}\nfunction populateMaps(extensions, types) {\n  var preference = ['nginx', 'apache', undefined, 'iana'];\n  Object.keys(db).forEach(function forEachMimeType(type) {\n    var mime = db[type];\n    var exts = mime.extensions;\n    if (!exts || !exts.length) {\n      return;\n    }\n    extensions[type] = exts;\n    for (var i = 0; i < exts.length; i++) {\n      var extension = exts[i];\n      if (types[extension]) {\n        var from = preference.indexOf(db[types[extension]].source);\n        var to = preference.indexOf(mime.source);\n        if (types[extension] !== 'application/octet-stream' && from > to || from === to && types[extension].substr(0, 12) === 'application/') {\n          continue;\n        }\n      }\n      types[extension] = type;\n    }\n  });\n}","map":{"version":3,"names":["db","require","extname","path","indexOf","split","pop","toLowerCase","exec","extractTypeRegExp","textTypeRegExp","exports","charset","charsets","lookup","contentType","extension","extensions","Object","create","types","populateMaps","type","match","mime","test","str","exts","length","substr","preference","undefined","keys","forEach","forEachMimeType","i","from","source","to"],"sources":["/Users/fernando/Documents/Universidad/IISSI 2/Nuevas Categorias/Simulacro-Examen/DeliverUS-Frontend-Owner/node_modules/react-native-mime-types/index.js"],"sourcesContent":["/*!\n * mime-types\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar db = require('mime-db')\n\nconst extname = function(path) {\n  if (!path || path.indexOf('.') === -1) { return '' }\n  path = '.' + path.split('.').pop().toLowerCase()\n  return /.*(\\..*)/g.exec(path)[1] || ''\n}\n\n/**\n * Module variables.\n * @private\n */\n\nvar extractTypeRegExp = /^\\s*([^;\\s]*)(?:;|\\s|$)/\nvar textTypeRegExp = /^text\\//i\n\n/**\n * Module exports.\n * @public\n */\n\nexports.charset = charset\nexports.charsets = { lookup: charset }\nexports.contentType = contentType\nexports.extension = extension\nexports.extensions = Object.create(null)\nexports.lookup = lookup\nexports.types = Object.create(null)\n\n// Populate the extensions/types maps\npopulateMaps(exports.extensions, exports.types)\n\n/**\n * Get the default charset for a MIME type.\n *\n * @param {string} type\n * @return {boolean|string}\n */\n\nfunction charset (type) {\n  if (!type || typeof type !== 'string') {\n    return false\n  }\n\n  // TODO: use media-typer\n  var match = extractTypeRegExp.exec(type)\n  var mime = match && db[match[1].toLowerCase()]\n\n  if (mime && mime.charset) {\n    return mime.charset\n  }\n\n  // default text/* to utf-8\n  if (match && textTypeRegExp.test(match[1])) {\n    return 'UTF-8'\n  }\n\n  return false\n}\n\n/**\n * Create a full Content-Type header given a MIME type or extension.\n *\n * @param {string} str\n * @return {boolean|string}\n */\n\nfunction contentType (str) {\n  // TODO: should this even be in this module?\n  if (!str || typeof str !== 'string') {\n    return false\n  }\n\n  var mime = str.indexOf('/') === -1\n    ? exports.lookup(str)\n    : str\n\n  if (!mime) {\n    return false\n  }\n\n  // TODO: use content-type or other module\n  if (mime.indexOf('charset') === -1) {\n    var charset = exports.charset(mime)\n    if (charset) mime += '; charset=' + charset.toLowerCase()\n  }\n\n  return mime\n}\n\n/**\n * Get the default extension for a MIME type.\n *\n * @param {string} type\n * @return {boolean|string}\n */\n\nfunction extension (type) {\n  if (!type || typeof type !== 'string') {\n    return false\n  }\n\n  // TODO: use media-typer\n  var match = extractTypeRegExp.exec(type)\n\n  // get extensions\n  var exts = match && exports.extensions[match[1].toLowerCase()]\n\n  if (!exts || !exts.length) {\n    return false\n  }\n\n  return exts[0]\n}\n\n/**\n * Lookup the MIME type for a file path/extension.\n *\n * @param {string} path\n * @return {boolean|string}\n */\n\nfunction lookup (path) {\n  if (!path || typeof path !== 'string') {\n    return false\n  }\n\n  // get the extension (\"ext\" or \".ext\" or full path)\n  var extension = extname('x.' + path)\n    .toLowerCase()\n    .substr(1)\n\n  if (!extension) {\n    return false\n  }\n\n  return exports.types[extension] || false\n}\n\n/**\n * Populate the extensions and types maps.\n * @private\n */\n\nfunction populateMaps (extensions, types) {\n  // source preference (least -> most)\n  var preference = ['nginx', 'apache', undefined, 'iana']\n\n  Object.keys(db).forEach(function forEachMimeType (type) {\n    var mime = db[type]\n    var exts = mime.extensions\n\n    if (!exts || !exts.length) {\n      return\n    }\n\n    // mime -> extensions\n    extensions[type] = exts\n\n    // extension -> mime\n    for (var i = 0; i < exts.length; i++) {\n      var extension = exts[i]\n\n      if (types[extension]) {\n        var from = preference.indexOf(db[types[extension]].source)\n        var to = preference.indexOf(mime.source)\n\n        if (types[extension] !== 'application/octet-stream' &&\n          from > to || (from === to && types[extension].substr(0, 12) === 'application/')) {\n          // skip the remapping\n          continue\n        }\n      }\n\n      // set the extension -> mime\n      types[extension] = type\n    }\n  })\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}