{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport * as mime from 'react-native-mime-types';\nvar normalizeFile = function normalizeFile(file) {\n  if (Platform.OS === 'web') {\n    var fileName = file.uri.split('/').pop();\n    var imageType = file.uri.split(',')[0].split(':')[1].split(';')[0];\n    var byteString = atob(file.uri.split(',')[1]);\n    var ab = new ArrayBuffer(byteString.length);\n    var arr = new Uint8Array(ab);\n    for (var i = 0; i < byteString.length; i++) {\n      arr[i] = byteString.charCodeAt(i);\n    }\n    var blob = new Blob([arr], {\n      type: imageType\n    });\n    return {\n      name: file.paramName,\n      fileObject: new File([blob], fileName + \".\" + mime.extension(imageType), {\n        type: imageType\n      })\n    };\n  } else {\n    return {\n      name: file.paramName,\n      fileObject: {\n        name: file.uri.slice(-20),\n        type: mime.lookup(file.uri),\n        uri: Platform.OS === 'ios' ? file.uri.replace('file://', '') : file.uri\n      }\n    };\n  }\n};\nvar getDataWithoutBodyFiles = function getDataWithoutBodyFiles(dataWithFiles) {\n  var data = _objectSpread({}, dataWithFiles);\n  Object.keys(data).filter(function (key) {\n    return data[key] && data[key].assets;\n  }).forEach(function (key) {\n    return delete data[key];\n  });\n  return data;\n};\nvar getFilesFromData = function getFilesFromData(data) {\n  return Object.keys(data).filter(function (key) {\n    return data[key] && data[key].assets && data[key].assets[0] && data[key].assets[0].uri && data[key].assets[0].height;\n  }).map(function (key) {\n    data[key].paramName = key;\n    return data[key];\n  });\n};\nfunction constructFormData(files, dataWithoutFiles) {\n  var formData = new FormData();\n  files.forEach(function (file) {\n    var normalizedFile = normalizeFile(file);\n    formData.append(normalizedFile.name, normalizedFile.fileObject);\n  });\n  Object.keys(dataWithoutFiles).forEach(function (key) {\n    if (dataWithoutFiles[key] !== null) {\n      formData.append(key, dataWithoutFiles[key]);\n    }\n  });\n  return formData;\n}\nfunction getMultiPartHeader() {\n  return {\n    headers: {\n      'Content-Type': 'multipart/form-data; charset=utf-8; boundary=\"separation between parts\";'\n    }\n  };\n}\nfunction prepareData(preparedData) {\n  var config, files;\n  if (preparedData) {\n    files = getFilesFromData(preparedData);\n  }\n  preparedData = getDataWithoutBodyFiles(preparedData);\n  if (files && files.length) {\n    preparedData = constructFormData(files, preparedData);\n    config = getMultiPartHeader();\n  }\n  return {\n    config: config,\n    preparedData: preparedData\n  };\n}\nvar prepareEntityImages = function prepareEntityImages(entity, imagePropertyNames) {\n  var entityCopy = _objectSpread({}, entity);\n  imagePropertyNames.forEach(function (impagePropertyName) {\n    if (entityCopy[impagePropertyName]) {\n      entityCopy[impagePropertyName] = {\n        assets: [{\n          uri: (process && process.env && process.env.API_BASE_URL || \"http://localhost:3000\") + \"/\" + entityCopy[impagePropertyName]\n        }]\n      };\n    }\n  });\n  return entityCopy;\n};\nexport { normalizeFile, getDataWithoutBodyFiles, getFilesFromData, constructFormData, getMultiPartHeader, prepareData, prepareEntityImages };","map":{"version":3,"names":["mime","normalizeFile","file","Platform","OS","fileName","uri","split","pop","imageType","byteString","atob","ab","ArrayBuffer","length","arr","Uint8Array","i","charCodeAt","blob","Blob","type","name","paramName","fileObject","File","extension","slice","lookup","replace","getDataWithoutBodyFiles","dataWithFiles","data","Object","keys","filter","key","assets","forEach","getFilesFromData","height","map","constructFormData","files","dataWithoutFiles","formData","FormData","normalizedFile","append","getMultiPartHeader","headers","prepareData","preparedData","config","prepareEntityImages","entity","imagePropertyNames","entityCopy","impagePropertyName"],"sources":["/Users/fernando/Documents/Universidad/IISSI 2/Nuevas Categorias/Simulacro-Examen/DeliverUS-Frontend-Owner/src/api/helpers/FileUploadHelper.js"],"sourcesContent":["import { Platform } from 'react-native'\nimport * as mime from 'react-native-mime-types'\n\n// Returns {name:fileName, fileObject:file}\nconst normalizeFile = (file) => {\n  if (Platform.OS === 'web') {\n    const fileName = file.uri.split('/').pop()\n    const imageType = file.uri.split(',')[0].split(':')[1].split(';')[0]\n    const byteString = atob(file.uri.split(',')[1])\n    const ab = new ArrayBuffer(byteString.length)\n    const arr = new Uint8Array(ab)\n    for (let i = 0; i < byteString.length; i++) { arr[i] = byteString.charCodeAt(i) }\n    const blob = new Blob([arr], {\n      type: imageType\n    })\n    return {\n      name: file.paramName,\n      fileObject: new File([blob], `${fileName}.${mime.extension(imageType)}`, {\n        type: imageType\n      })\n    }\n  } else {\n    return {\n      name: file.paramName,\n      fileObject: {\n        name: file.uri.slice(-20),\n        type: mime.lookup(file.uri),\n        uri: Platform.OS === 'ios' ? file.uri.replace('file://', '') : file.uri\n      }\n    }\n  }\n}\n\nconst getDataWithoutBodyFiles = (dataWithFiles) => {\n  const data = { ...dataWithFiles }\n  Object.keys(data).filter(key => data[key] && data[key].assets).forEach(key => delete data[key])\n  return data\n}\n\nconst getFilesFromData = (data) => {\n  return Object.keys(data).filter(key => data[key] && data[key].assets && data[key].assets[0] && data[key].assets[0].uri && data[key].assets[0].height).map(key => { // data[key].height para ver si viene del image picker\n    data[key].paramName = key\n    return data[key]\n  })\n}\n\nfunction constructFormData (files, dataWithoutFiles) {\n  const formData = new FormData()\n  files.forEach(file => {\n    const normalizedFile = normalizeFile(file)\n    formData.append(normalizedFile.name, normalizedFile.fileObject)\n  })\n  Object.keys(dataWithoutFiles).forEach((key) => {\n    if (dataWithoutFiles[key] !== null) { // if null values are present they are sent as strings with value 'null' and could be misleading for the backend / database\n      formData.append(key, dataWithoutFiles[key])\n    }\n  })\n  return formData\n}\n\nfunction getMultiPartHeader () {\n  return {\n    headers: {\n      'Content-Type': 'multipart/form-data; charset=utf-8; boundary=\"separation between parts\";'\n    }\n  }\n}\n\nfunction prepareData (preparedData) {\n  let config, files\n  if (preparedData) {\n    files = getFilesFromData(preparedData)\n  }\n  preparedData = getDataWithoutBodyFiles(preparedData)\n  if (files && files.length) {\n    preparedData = constructFormData(files, preparedData)\n    config = getMultiPartHeader()\n  }\n  return { config, preparedData }\n}\n\nconst prepareEntityImages = (entity, imagePropertyNames) => {\n  const entityCopy = { ...entity }\n  imagePropertyNames.forEach(impagePropertyName => {\n    if (entityCopy[impagePropertyName]) {\n      entityCopy[impagePropertyName] = { assets: [{ uri: `${process.env.API_BASE_URL}/${entityCopy[impagePropertyName]}` }] }\n    }\n  })\n\n  return entityCopy\n}\n\nexport { normalizeFile, getDataWithoutBodyFiles, getFilesFromData, constructFormData, getMultiPartHeader, prepareData, prepareEntityImages }\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}